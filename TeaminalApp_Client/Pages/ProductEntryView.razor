@page "/ProductEntryView"
@inject HttpClient Http
@using TerminalApp_Shared.Models
<link href="" rel="stylesheet" />
<div class="grid-container">
    <h3>履歴一覧</h3>

    @if (isLoading)
    {
            <p>データを読み込んでいます...</p>
    }
    else if (!ProductResults.Any())
    {
            <p>データが存在しません。</p>
    }
    else
    {
            <table class="grid-table">
                <thead>
                    <tr>
                        @* <th>生産品ID</th> *@
                        <th>生産品名</th>
                        <th>製品タイプ</th>
                        <th>増減タイプ</th>
                        <th>数量</th>
                        <th>単位</th>
                        <th>開始<br />時間</th>
                        <th>完了<br />時間</th>
                        <th>稼働<br />時間</th>
                        <th>休憩<br />時間</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var product in ProductResults)
                {
                            <tr>
                                @* <td>@product.ProductId</td> *@
                                <td>@product.ProductName</td>
                                <td>@product.ProductType</td>
                                <td>@product.AdjustmentType</td>
                                <td>@product.Quantity</td>
                                <td>@product.SelectedUnit</td>
                                <td>@FormatTimestamp(product.StartTimestamp)</td>
                                <td>@FormatTimestamp(product.CreateTimestamp)</td>
                                <td>@FormatTime(product.WorkingMinutes)</td>
                                <td>@FormatTime(product.BreaktimeMinutes)</td>
                            </tr>
                }
                </tbody>
            </table>
    }
</div>

@code {
    private List<ProductResult> ProductResults = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductResultsAsync();
    }

    private async Task LoadProductResultsAsync()
    {
        try
        {
            ProductResults = await Http.GetFromJsonAsync<List<ProductResult>>("http://localhost:5224/api/ProductResults")
                              ?? new List<ProductResult>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"データ取得中にエラーが発生しました: {ex.Message}");
            ProductResults = new List<ProductResult>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private string FormatTimestamp(string timestamp)
    {
        if (string.IsNullOrEmpty(timestamp))
        {
            return "不明";
        }
        if (DateTime.TryParse(timestamp, out var dateTime))
        {
            return dateTime.ToString("HH:mm:ss");
        }
        return "不明";
    }

    private string FormatTime(int minutes)
    {
        int h = minutes / 60;
        int m = minutes % 60;
        return $"{h}:{m:D2}";
    }
}
