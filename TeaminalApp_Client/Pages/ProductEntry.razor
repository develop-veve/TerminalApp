@page "/ProductEntry"
@inject HttpClient Http
@using System.Reflection
@using System.Data
@using TerminalApp_Shared
@using TerminalApp_Shared.Models
@using TerminalApp_Shared.Utils

<div class="container">
    <div class="form-container">
        <h3 class="section-title">生産登録</h3>
        <EditForm Model="@Product" OnValidSubmit="@SaveProductEntry">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label class="field-title" for="createUserId">担当者ID</label>
                <InputText id="createUserId" class="form-control" @bind-Value="Product.CreateUserID" Disabled />
            </div>
            <div class="form-group">
                <label class="field-title" for="createUserName">担当者名</label>
                <InputText id="createUserName" class="form-control" @bind-Value="Product.CreateUserName" Disabled />
            </div>
            <div class="form-group">
                <label class="field-title" for="productId">生産品ID</label>
                <InputText id="productId" @bind-Value="Product.ProductId" class="form-control" />
            </div>
            <div class="form-group">
                <label class="field-title" for="productName">生産品名</label>
                <InputText id="productName" @bind-Value="Product.ProductName" class="form-control" />
            </div>
            <div class="form-group">
                <label class="field-title" for="productType">製品タイプ</label>
                <InputSelect id="productType" @bind-Value="Product.ProductType" class="form-control">
                    <option value="">選択してください</option>
                    <option value="完製品">完製品</option>
                    <option value="半製品">半製品</option>
                    <option value="部品">部品</option>
                    <option value="材料">材料</option>
                </InputSelect>
            </div>
            <div class="form-group">
                <label class="field-title" for="adjustmentType">増減タイプ</label>
                <InputSelect id="adjustmentType" @bind-Value="Product.AdjustmentType" class="form-control">
                    <option value="">選択してください</option>
                    <option value="製造">製造</option>
                    <option value="組立">組立</option>
                    <option value="仕入">仕入</option>
                </InputSelect>
            </div>
            <div class="form-group">
                <label class="field-title" for="quantity">数量</label>
                <div style="display: flex; gap: 10px;">
                    <InputText id="quantity" @bind-Value="Product.Quantity" class="form-control" />
                    <InputSelect id="unit" @bind-Value="Product.SelectedUnit" class="form-control">
                        <option value="pcs">pcs</option>
                        <option value="kg">kg</option>
                        <option value="g">g</option>
                        <option value="m">m</option>
                        <option value="cm">cm</option>
                        <option value="mm">mm</option>
                    </InputSelect>
                </div>
            </div>
            <br />
            <button class="btn-primary" type="submit">完了通知</button>
        </EditForm>
        <br />
        <br />
        <div>
            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <p class="text-success">@SuccessMessage</p>
            }
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p class="text-danger">@ErrorMessage</p>
            }
        </div>
    </div>

    <div class="calculator-container">
        <div class="calculator-display-card">
            <div class="history">@CalculationHistory</div>
            <div class="result">@InputValue</div>
        </div>
        <div class="calculator">
            @foreach (var button in CalculatorButtons)
            {
                <button @onclick="() => HandleButtonClick(button)"
                        class="@(button == "=" ? "btn-primary" : "")">
                    @button
                </button>
            }
        </div>
    </div>
</div>

@code {
    private ProductResult Product { get; set; } = new();
    private string SuccessMessage { get; set; } = "";
    private string ErrorMessage { get; set; } = "";
    private string InputValue { get; set; } = "0";
    private string CalculationHistory { get; set; } = "";
    private readonly string[] CalculatorButtons = new[]
    {
        "CE", "C", "←", "÷",
        "7", "8", "9", "×",
        "4", "5", "6", "−",
        "1", "2", "3", "+",
        "±", "0", ".", "=",
    };

    protected override async Task OnInitializedAsync()
    {
        Product.CreateUserID = "0001";
        Product.CreateUserName = "管理者";
    }

    private async Task SaveProductEntry()
    {
        try
        {
            Product.CreateUserID = "0001";
            Product.CreateUserName = "管理者";

            var todayResults = await FetchTodayResults();
            if (todayResults.Any())
            {
                var lastCompleted = todayResults.OrderByDescending(r => DateTime.Parse(r.CreateTimestamp)).First();
                Product.StartTimestamp = lastCompleted.CreateTimestamp;
            }
            else
            {
                Product.StartTimestamp = DateTime.Today.AddHours(8).ToString("yyyy-MM-dd HH:mm:ss");
            }

            Product.CreateTimestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

            var response = await Http.PostAsJsonAsync("http://localhost:5224/api/ProductResults", Product);
            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "登録が完了しました。";
                ErrorMessage = "";
            }
            else
            {
                ErrorMessage = "登録に失敗しました。";
                SuccessMessage = "";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"エラーが発生しました: {ex.Message}";
        }
    }

    private async Task<List<ProductResult>> FetchTodayResults()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<ProductResult>>("http://localhost:5224/api/ProductResults/today");
            return response ?? new List<ProductResult>();
        }
        catch
        {
            return new List<ProductResult>();
        }
    }

    private void HandleButtonClick(string buttonValue)
    {
        if (CalculationHistory.Contains("エラー") || InputValue == "エラー")
        {
            ResetCalculator();
            return;
        }

        if (buttonValue == "=" && CalculationHistory.Contains("="))
        {
            return;
        }

        if (CalculationHistory.Contains("=") && buttonValue != "=")
        {
            ResetCalculator();
        }

        switch (buttonValue)
        {
            case var _ when double.TryParse(buttonValue, out _):
                InputValue = InputValue == "0" ? buttonValue : InputValue + buttonValue;
                CalculationHistory += buttonValue;
                break;

            case ".":
                if (!InputValue.Contains("."))
                {
                    InputValue += ".";
                    CalculationHistory += ".";
                }
                break;

            case "±":
                if (double.TryParse(InputValue, out var currentNumber))
                    InputValue = (-currentNumber).ToString();
                break;

            case "C":
                ResetCalculator();
                break;

            case "CE":
                InputValue = "0";
                break;

            case "←":
                InputValue = InputValue.Length > 1 ? InputValue[..^1] : "0";
                break;

            case "=":
                ExecuteCalculation();
                break;

            default:
                if (!string.IsNullOrEmpty(InputValue))
                {
                    CalculationHistory += $" {buttonValue} ";
                    InputValue = "";
                }
                break;
        }
    }

    private void ExecuteCalculation()
    {
        try
        {
            var tokens = CalculationHistory.Split(' ', StringSplitOptions.RemoveEmptyEntries).ToList();
            if (tokens.Count > 0 && IsOperator(tokens[^1]))
            {
                tokens.RemoveAt(tokens.Count - 1);
            }

            CalculationHistory = string.Join(" ", tokens);
            var result = EvaluateExpression(CalculationHistory);
            InputValue = result.ToString("F2");
            CalculationHistory += $" = {InputValue}";
        }
        catch
        {
            InputValue = "エラー";
        }
    }

    private bool IsOperator(string token) =>
        new[] { "+", "−", "×", "÷" }.Contains(token);

    private double EvaluateExpression(string expression)
    {
        var replacedExpression = expression
            .Replace("×", "*")
            .Replace("÷", "/")
            .Replace("−", "-");
        return Convert.ToDouble(new DataTable().Compute(replacedExpression, null));
    }

    private void ResetCalculator()
    {
        InputValue = "0";
        CalculationHistory = "";
    }
}
